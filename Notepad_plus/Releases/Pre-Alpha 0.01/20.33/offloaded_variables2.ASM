;************************INCLUDE FILE*****************************
;(do not assemble stand-alone.)

;========ZONE OPERATIONS==========


;ARRAYS, POINTERS, AND SUCH
@START

	.NO $9000	
RZONE.ARRAY							.BS $900,$42			;STORES UNCOMPRESSED ZONE DATA FOR THE REGIONAL MAP IN MAIN MEMORY

;==========KEEP THESE TWO TOGETHER, IN THIS ORDER====
;(because some routines use these two buffers as a contiguous 2 page block of memory)
;
;	$9900 (ONLY WHEN ABOVE .NO IS ACTIVE)
ZONE_TOOLS.OUTPUT_BUFFER			.BS	$100,$42			;TEMPORARY BUFFER FOR OUTPUT FROM ZONE_TOOLS.UNCOMPRESS.SINGLE
NEW.MAP				.EQ ZONE_TOOLS.OUTPUT_BUFFER
MAP.DATA.DEST_ADDR  .EQ ZONE_TOOLS.OUTPUT_BUFFER
MAP.DATA.PASS1		.EQ ZONE_TOOLS.OUTPUT_BUFFER
	;**OPT** Memory. change to a pointer to the RWTS buffer.
MAP.DATA.PASS2		.EQ ZONE_TOOLS.OUTPUT_BUFFER+$80
	;$9A00 (ONLY WHEN ABOVE .NO IS ACTIVE)
ZONE_TOOLS.INPUT_BUFFER				.BS $101,$42			;TEMPORARY BUFFER WHERE COMPRESSED ZONE DATA IS COPIED FROM AUX MEMORY BEFORE UNCOMPRESSING IT
NEW.SHAPES			.EQ ZONE_TOOLS.INPUT_BUFFER
;NOTE: THIS BUFFER IS $101 BYTES INSTEAD OF $100 BECAUSE THE ZONE.LOOKUP.LO/HO LOOKUP TABLE CONTAIN THE START ADDRESS OF EACH ZONE, WHICH IS USED AS THE START AND END ADDRESS IN AN AUX MOVE (I.E. THE START OF THE NEXT ZONE IS USED AS THE END ADDRESS OF THE CURRENT ZONE). AS A RESULT, AUX MOVE WRITES AN EXTRA BYTE TO INPUT BUFFER, AND WHICH WOULD CAUSE AN OVERFLOW FOR UNCOMPRESSED ZONES. THE EXTRA BYTE IN THE .BS $101 ACCOMIDATES THIS SO THE AUX MOVE DOESN'T OVERFLOW INTO THE LOOKUP TABLE. 
;=====================================


;==========KEEP THESE TWO TOGETHER, IN THIS ORDER====
;WARNING: DO NOT PUT THESE IN VARIABLES.BIN OR THEY WILL GET CLOBBERED
	;$9B01 (ONLY WHEN ABOVE .NO IS ACTIVE)
	;
	;***NOTE THE EXTRA BYTE IN THE START ADDRESS DUE TO EXTRA BYTE AT END OF LAST VARIABLE
ZONE.LOOKUP.LO								.BS	$41,$42				;CONTAINS THE AUX LO ADDRESS FOR EACH WORLD ZONE.
ZONE.LOOKUP.HO								.BS	$41,$42				;CONTAINS THE AUX HO ADDRESS FOR EACH WORLD ZONE. 
;=====================================




ZONE_TOOLS.INPUT					.EQ	$EA
ZONE_TOOLS.INPUT.INDEX				.EQ	SAVED.XREG.LOCAL
ZONE_TOOLS.OUTPUT.INDEX				.EQ	SAVED.XREG.LOCAL1	

@END

;========COMPRESS/UNCOMPRESS============
@START
ZONE_TOOLS.TILE_LAST 				.BS $1	

	;manually set these flags ($00=off, $01=on) to disable/enable compression on each world zone
	;Note: These flags must be set in two locations, here and in the variable definitions at the end of LOADER.BIN											
WZONE.COMPRESSION.FLAGS				.HS		01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.00.01.01.01.01.01.01.01.00.00.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01
	;WZONE (!DEC) #							0	1  2  3	 4	5  6  7	 8	9 10 11	12 13 14 15	16 17 18 19	20 21 22 23	24 25 26 27	28 29 30 31	32 33 34 35	36 37 38 39	40 41 42 43	44 45 46 47	48 49 50 51	52 53 54 55	56 57 58 59	60 61 62 63
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00

;WORLD ZONES
WORLD.COMPRESS.BUFFER_ADDRESS.START	.BS $2		;shared
WORLD.COMPRESS.BUFFER_ADDRESS.END	.BS $2		;shared		
WORLD.COMPRESS.ZONE_INPUT.ADDRESS	.BS	$2		;shared
WORLD.COMPRESS.ZONE_OUTPUT.ADDRESS	.BS $2
WORLD.COMPRESS.AUX_MEMORY.START_LO	.EQ	$00		;#CONSTANT. The starting location in aux memory where compressed zone data is stored	
WORLD.COMPRESS.AUX_MEMORY.START_HO	.EQ	$02		;#CONSTANT. The starting location in aux memory where compressed zone data is stored	

WZONE.TOTAL.EXTENDED				.EQ $81		;#CONSTANT. TOTAL NUMBER OF ZONES ON THE WORLD MAP *2
WZONE.TOTAL.PLUSONE					.EQ $41		;#CONSTANT. There are 64 zones ($40), so +1 is $41. Oops. Counting zero, there are $3F.

;NOTE: I THINK WZONE.TOTAL SHOULD BE $40..THE LOOP THAT USES IT INCREMENTS INDEX BEFORE THE EXIT CHECK, SO THE -1 DOESN'T APPLY. AND THE $39 IS A HEX/DEC TYPO. 
WZONE.TOTAL2						.EQ $40		;#CONSTANT. These WZONE.TOTAL constants need to get cleaned up. 
WZONE.TOTAL							.EQ $39		;#CONSTANT.	TOTAL NUMBER OF ZONES ON THE WORLD MAP -1.
;********READ NOTE BEFORE USING THIS CONSTANT*****

;NOTE: also check end of loader.bin file, there are temporary variables defined there which are part of the loading process

WZONE.UNCOMPRESS.START 				.BS $1		;STARTING WORLD ZONE WHEN UNCOMPRESSING DATA INTO THE REGIONAL MAP
WZONE.UNCOMPRESS.CURRENT			.BS $1		;CURRENT WORLD ZONE WHEN UNCOMPRESSING DATA INTO THE REGIONAL MAP
WZONE.UNCOMPRESS.ROW				.BS $1		;USED TO RESET THE CURRENT WORLD ZONE AT THE START OF EACH ROW. shared
WZONE.OFFSET						.EQ $08		;#CONSTANT. ZONE NUMBER OFFSET FOR MOVING UP OR DOWN BY 1 WORLD ZONE. 
WZONE.OFFSET2						.EQ	$10		;#CONSTANT. WZONE.OFFSET X 2

;REGIONAL ZONES
RZONE.OFFSET						.EQ $03		;#CONSTANT. ZONE NUMBER OFFSET FOR MOVING UP OR DOWN BY 1 REGION ZONE. 
RZONE.ARRAY.ZONE.HORIZONTAL			.EQ $10		;#CONSTANT. NUMBER OF TILES BETWEEN ZONES, LEFT/RIGHT
RZONE.ARRAY.ZONE.VERTICLE			.EQ $300	;#CONSTANT. NUMBER OF TILES BETWEEN ZONES, UP/DOWN

RZONE.ARRAY.OFFSET					.EQ $30		;#CONSTANT. NUMBER OF TILES BETWEEN ROWS, UP/DOWN. 
RZONE.ARRAY.OFFSET.HORIZONTAL		.EQ $01		;#CONSTANT. NUMBER OF TILES BETWEEN ROWS, LEFT/RIGHT.
RZONE.ARRAY.INDEX_ROW				.EQ $FC		;USED FOR ITERATING THROUGH THE ARRAY WHEN UNCOMPRESSING ZONE DATA
RZONE.ARRAY.INDEX.SCROLL_FROM		.EQ $EA		;USED FOR SCOLLING ZONE DATA WHEN LOAD THREASHOLD IS REACHED 
RZONE.ARRAY.INDEX.SCROLL_TO			.EQ $EC		;USED FOR SCOLLING ZONE DATA WHEN LOAD THREASHOLD IS REACHED 


RZONE.ARRAY.STOP					.BS $2		;THE 16-BIT STOP VALUE FOR ITERATING THE ARRAY, WHICH IS DIFFERNT FOR EACH ZONE. 
RZONE.UNCOMPRESS.CURRENT 			.BS $1		;THE CURRENT REGIONAL ZONE NUMBER BEING PROCESSED

;RZONE #							 0	1  2  3	 4	5  6  7	 8											
RZONE.LOOKUP.ARRAY_START.LO		.HS 00.10.20.00.10.20.00.10.20
RZONE.LOOKUP.ARRAY_START.HO		.HS	00.00.00.03.03.03.06.06.06

;the stop value isn't the last array element of the zone, it is the first element of the last row. 											
RZONE.LOOKUP.ARRAY_STOP.LO		.HS	D0.E0.F0.D0.E0.F0.D0.E0.F0
RZONE.LOOKUP.ARRAY_STOP.HO		.HS	02.02.02.05.05.05.08.08.08


;ZONE LOOKUP TABLE CALCULATION

;AUX.READ_ADDRESS.START			;already defined in Routines_Disk.ASM ;2byte

;AUX.READ_ADDRESS.END			.EQ WORLD.COMPRESS.BUFFER_ADDRESS.START  ;1byte
AUX.READ_ADDRESS.END			.BS $2

;MAP.DATA						.EQ WORLD.COMPRESS.BUFFER_ADDRESS.END	;2 byte
MAP.DATA						.BS $2

;ZONE.START.BASE_ADDRESS			.EQ WORLD.COMPRESS.ZONE_INPUT.ADDRESS	;2 byte	
ZONE.START.BASE_ADDRESS			.BS $2
	
;COUNTER.ADJ					.EQ WZONE.UNCOMPRESS.START				;1 byte
COUNTER.ADJ					.BS $1

;ZONE.COUNTER				.EQ WZONE.UNCOMPRESS.CURRENT	;1byte
PRIOR.ZONE.INDEX			.BS $1

;XREG.RESUME				.EQ WZONE.UNCOMPRESS.ROW ;USED TO CARRYOVER THE COMPRESSED TILE RECORD INDEX IF AN UNCOMPRESSED ZONE IS FOUND
XREG.RESUME					.BS $1 ;USED TO CARRYOVER THE COMPRESSED TILE RECORD INDEX IF AN UNCOMPRESSED ZONE IS FOUND

@END


;WORLD EDGE
WORLD.EDGE.NORTH					.EQ $08				;#CONSTANT. The trigger for when zones are scrolled and 3 new zones are loaded.
WORLD.EDGE.SOUTH					.EQ $76				;#CONSTANT. The trigger for when zones are scrolled and 3 new zones are loaded.
WORLD.EDGE.EAST						.EQ $77				;#CONSTANT. The trigger for when zones are scrolled and 3 new zones are loaded.
WORLD.EDGE.WEST						.EQ $09				;#CONSTANT. The trigger for when zones are scrolled and 3 new zones are loaded.



;=========ZONE TRANSITION===========
@START
RZONE.LOAD_THREASHOLD.NORTH			.EQ $07				;#CONSTANT. The trigger for when zones are scrolled and 3 new zones are loaded. 
RZONE.LOAD_THREASHOLD.SOUTH			.EQ $27				;#CONSTANT. The trigger for when zones are scrolled and 3 new zones are loaded. 
RZONE.LOAD_THREASHOLD.EAST			.EQ $28				;#CONSTANT. The trigger for when zones are scrolled and 3 new zones are loaded. 
RZONE.LOAD_THREASHOLD.WEST			.EQ $08				;#CONSTANT. The trigger for when zones are scrolled and 3 new zones are loaded. 

;RZONE.LOAD_THREASHOLD				.EQ $10				;#CONSTANT. The trigger for when zones are scrolled and 3 new zones are loaded. 
RZONE.LOAD.OFFSET.UP				.EQ $300			;#CONSTANT. The amount by which players RMAP is adjusted after new zones are loaded, when player is moving north
RZONE.LOAD.OFFSET.DOWN				.EQ $300			;#CONSTANT. The amount by which players RMAP is adjusted after new zones are loaded, when player is moving south
RZONE.LOAD.OFFSET.LEFT				.EQ $10				;#CONSTANT. The amount by which players RMAP is adjusted after new zones are loaded, when player is moving east
RZONE.LOAD.OFFSET.RIGHT				.EQ $10				;#CONSTANT. The amount by which players RMAP is adjusted after new zones are loaded, when player is moving west

RZONE.LOAD.X.START					.EQ $18				;THE STARTING X AXIS POSITION AFTER A ZONE TRANSITION
RZONE.LOAD.Y.START					.EQ $17				;THE STARTING Y AXIS POSITION AFTER A ZONE TRANSITION

RZONE.SOUTH.TABLE_TO.LO 		.HS					00.00
RZONE.SOUTH.TABLE_TO.HO 		.HS					00.03
RZONE.SOUTH.TABLE_FROM.LO 		.HS					00.00
RZONE.SOUTH.TABLE_FROM.HO  		.HS					03.06

RZONE.EAST.TABLE_TO.LO 			.HS					00.00.00.10.10.10
RZONE.EAST.TABLE_FROM.LO 		.HS					10.10.10.20.20.20

RZONE.WEST.TABLE_TO.LO 			.HS					20.20.20.10.10.10
RZONE.EAST_WEST.TABLE_TO.HO		.HS					00.03.06.00.03.06

RZONE.WEST.TABLE_FROM.LO 		.HS					10.10.10.00.00.00
RZONE.EAST_WEST.TABLE_FROM.HO  	.HS					00.03.06.00.03.06

RZONE.TRANSITION.TOP.HO				.EQ	$0000			;#CONSTANT. The HO byte of the start address of the top row of zones 	(0,1,2) on the regional map. Used in scrolling zones. 
RZONE.TRANSITION.MIDDLE.HO			.EQ	$0300			;#CONSTANT. The HO byte of the start address of the middle row of zones (3,4,5) on the regional map. Used in scrolling zones. 
RZONE.TRANSITION.BOTTOM.HO			.EQ	$0600			;#CONSTANT. The HO byte of the start address of the bottom row of zones (6,7,8) on the regional map. Used in scrolling zones. 



;START AND END RMAP ADDRESSES OF THE REGIONAL ZONES
RZONE.ARRAY.Z0.START				.EQ $00				;#CONSTANT
RZONE.ARRAY.Z0.END					.EQ $2DF			;#CONSTANT

RZONE.ARRAY.Z1.START				.EQ $10				;#CONSTANT
RZONE.ARRAY.Z1.END					.EQ $2EF			;#CONSTANT

RZONE.ARRAY.Z2.START				.EQ $20				;#CONSTANT
RZONE.ARRAY.Z2.END					.EQ $2FF			;#CONSTANT

RZONE.ARRAY.Z3.START				.EQ $300			;#CONSTANT
RZONE.ARRAY.Z3.END					.EQ $5DF			;#CONSTANT

RZONE.ARRAY.Z4.START				.EQ $310			;#CONSTANT
RZONE.ARRAY.Z4.END					.EQ $5EF			;#CONSTANT

RZONE.ARRAY.Z5.START				.EQ $320			;#CONSTANT
RZONE.ARRAY.Z5.END					.EQ $5FF			;#CONSTANT

RZONE.ARRAY.Z6.START				.EQ $600			;#CONSTANT
RZONE.ARRAY.Z6.END					.EQ $8DF			;#CONSTANT

RZONE.ARRAY.Z7.START				.EQ $610			;#CONSTANT
RZONE.ARRAY.Z7.END					.EQ $8EF			;#CONSTANT

RZONE.ARRAY.Z8.START				.EQ $620			;#CONSTANT
RZONE.ARRAY.Z8.END					.EQ $8FF			;#CONSTANT

@END



	