{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\
\
\
Beth,\
\
Thanks for the additional clarification!\
\
My goal defiantly is to avoid the wrapping issues and I see now how to do it.\
\
My mind was stuck in a mode of envisioning that the loader zones would get their data from a linear source (disk or an array in memory somewhere)  which would have address wrapping issues. Even though moving between zones was seamless on the " treadmill" it seemed like there would still be global map edge wrapping issues.\
\
But I now see that the key is to move the wrapping issue up one or more layers of abstraction and deal with it at the zone level. With far fewer zones than tiles, a wrapping algorithm at that level seems very straightforward. Combined with the key point of having 9 loader zones in memory at a time; problem solved.\
\
\
Thanks again!\
\
\pard\pardeftab720\partightenfactor0
\cf2 \'97\'97\'97\'97\
\
\
Note:\
\
Beth mentions recentering the zones to the player when the load threshold is reached. I think that can be zone by having a ZMAP variable tracking the player location in the 9 zones. When the load threshold is reached and the zones are scrolled and loaded, the ZMAP is adjusted according, I would assume by the same number of tiles as the zones are scrolled.\
\
\
\
\'97\'97\'97\'97}