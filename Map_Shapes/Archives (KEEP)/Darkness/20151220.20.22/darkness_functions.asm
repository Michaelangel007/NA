;************************INCLUDE FILE*****************************
;(do not assemble stand-alone. For a stand-alone version of this routine see examples/rwts2)

;TROUBLESHOOTING
;
;USING DRIVER.DARKNESS
;	COMMENT THE ARRAY DEFINITION FOR SCREEN.TILE.DATA (IN TILE_FUNCTIONS.ASM) AND 
;	REPLACE WITH A TEMPORARY VERSION DEFINED IN THIS FUNCTION, WHICH CONTROLS WHICH 
;	TILES ON SCREEN ARE OBSCURING TILES. 
;
;	ONCE ERASE.TILE AND DRAWTILE ARE INTEGRATED WITH THE REST OF THE GAME CODE
;	THE PROCEDURE FOR USING THE DRIVER TO TEST A FULL SCREEN MAY CHANGE (TESTING A SINGLE POSTION VIA TROUBLSHOOTING HOOK #3 WILL PROBABLY BE THE SAME)	
;	I'D GUESS THAT IT MAY BE NECESSARY FOR THE ERASE.TILE AND DRAWTILE FUNCTIONS TO SKIP THE GUTS OF THEIR CODE 
;	AND RETURN TO THE LOOP. OR MAYBE IT WON'T MATTER IF THEY DO THEIR THING SINCE WE'D JUST BE INTERESTED IN THE DARKNESS FLAGGED IN SCREEN.DARK.DATA ANYWAY
;
;USING THE TROUBLESHOOTING HOOKS
;	UNCOMMENT THE CODE IN DRIVER.DARKNESS AND UNDER EACH HOOK
;	USE DRIVER.DARKNESS AS THE ENTRY. SO CALL DRIVER.DARKNESSS FROM WHERE EVER THE GAME CURRENT 
;	LAUNCHES FROM...(GRAPHICS_ENGINE.ASM AT THE TIME OF THIS WRITING). AND 
;	HAVE IT BRK AFTER THE CALL. 
;
;NORMAL REGISTER VALUES AT BRK USING DRIVER.DARKNESS.
;		X=$85 (THE NUMBER OF LOOKUP VALUES IN SCREEN.DARK.SEARCH_INDEX)
;		Y=$A8 (THE LAST VALUE IN SCREEN.DARK.SEARCH_INDEX, WHICH CORRESPONDS TO THE ELEMENTS OF SCREEN.TILE.DATA)
;
;TROUBLESHOOTING HOOK #1
;	TEST SKIPPING ERASE IF THE CURRENT TILE WAS DARK LAST MOVE (NET OF SCROLLING)
;	THIS HOOK IS LOCATED IN THE ERASE.TILE SUBROUTINE IN GRAPHICS_ENGINE.ASM
;
;TROUBLESHOOTING HOOK #2
;	TEST SKIPPING OBSCURING TILE EVALUATION FOR TILES ALREADY FLAGGED AS DARK
;	USE THIS TO SEE WHICH Y VALUES (SCREEN.TILE.DATA ELEMENTS) FOR WHICH DARKNESS IS CALCUALTED FOR. 
;	DARKNESS SHOULD NOT BE CALCULATED FOR TILES THAT WERE FLAGGED AS DARK (WITH $01) IN SCREEN.DARK.DATA IN AN EARLIER ITERATION.
;
;TROUBLESHOOTING HOOK #3
;	TEST A SINGLE SCREEN POSITION (Y-REG VALUE) AND OBSERVE THE DARKNESS CALCULATED IN SCREEN.DARK.DATA
;	THERE IS ONE HOOK IN DRIVER.DARKNESS, DARKNESS.REVIEW AND 2 IN OUTERLOOP (ONE AT THE TOP AND ONE THAT SETS UP THE "TESTENTRY" LABEL AT THE BOTTOM)


DRIVER.DARKNESS

;INIT ARRAYS TO $00
	LDY #$00
.LOOP
	LDA #$00
	STA SCREEN.DARK.DATA, Y
	STA SCREEN.DARK.DATA_BEFORE, Y	
	CPY #$BA
	BEQ .DONE
	INY
	JMP .LOOP
.DONE	


;SET TEST POSITION	 (HOOK #3)	
	;LDY #$5E			;SCREEN POSITION (SCREEN.TILE.DATA ELEMENT)

;TEST ERASE SKIP (HOOK #1)
;	LDA	#$01						
;	STA SCREEN.DARK.DATA_BEFORE+$9D	;CHANGE THE OFFSET TO THE SCREEN POSITION YOU WANT TO TEST
	
;DISPLYS MMM AT LAUNCH TO MARK WHEN THE PROGRAM STARTS, IN CASE OF AN ENDLESS LOOP (THE LOAD TIME IS PRETTY LONG SO THIS HELPS MAKE IT OBVIOUS WHEN AN ENDLESS LOOP IS OCCURING)
;	LDA #$CD
;	JSR $FDED
;	LDA #$CD
;	JSR $FDED
;	LDA #$CD
;	JSR $FDED
	
;	JSR DARKNESS.REVIEW
	BRK
	
DARKNESS.REVIEW		;=============REWORK DARNKESS FOR ENTIRE SCREEN=======
;PARAMETERS: NONE
;RETURN VALUE: SCREEN.DARK (UPDATED)
;ENTRANCE: VIA ???, DRIVER.DARKNESS (TROUBLESHOOTING)

;*********NOTE ON CODE STRUCTURE: This routine has a spaghetti-eque design to avoid JSRs and extra JMPs where possible,
;by keeping code in range for branches. The main logic is in OUTERLOOP and INNERLOOP. They routines make calls to ERASE.TILE, DRAWTILE, and when done control is transfered
;to DRAW.MISC to finish up a few odds and ends, and then finially exit via RTS.  

;TROUBLESHOOTING HOOK #3
	;JMP TESTENTRY

;SAVE REGISTERS (ENTRY VALUES)
	TXA
	PHA
	TYA
	PHA

;INIT VARIABLES
	LDX #$FF				;SET TO $FF SO INX CAN BE AT TOP OF OUTERLOOP, SINCE THE INTERLOOP DOESN'T HAVE A COMMON EXIT POINT
							;INDEX FOR SCREEN.DARK.SEARCH_INDEX

	LDY #$00				;INIT TO $00 SO FIRST CPY IN OUTERLOOP DOESN'T ACCIDENTALLY TRIGGER

;SAVE REGISTERS	(INTERNAL VAUES)	
	TXA						;REGISTERED NEED TO BE SAVED HERE BECAUSE THEY ARE RESTORED AT START OF OUTERLOOP, SO THAT THEY CAN BE SAVE (AFTER MODIFICAITON) AT END OF OUTERLOOP, BECAUSE INNERLOOP USES X-REG. AND INNERLOOP RETURNS TO OUTERLOOP SO THE REGISTERES HAVE TO BE RESTORED AT THE START OF OUTERLOOP IN ORDER FOR OUTERLOOP TO MODIFY THEM (X-REG SPECIFICALLY). 
	PHA

	JMP OUTERLOOP


DRAW.MISC 						;LOCATING EXIT HERE SAVES 133 JMP COMMANDS BY ALLOWING OUTERLOOP TO FALL INTO INNERLOOP. THIS IS BECASUE EXIT CAN'T BE LOCATED AT THE BOTTOM DUE TO THE "TYPE" SECTIONS OF CODE NOT HAVING A COMMON EXIT, WHICH IS TO AVOID A JMP IN EACH SECTION TO A COMMON EXIT (TOO FAR FOR BRANCH)
;Y-REG CONTAINS SCREEN POSITION AS MAPPED TO SCREEN.TILE.DATA.

;DRAW ANY TILES (NOT DARK NOT, BUT WAS DARK BEFORE) NOT ALREADY DRAWN
;(THE OUTER/INNER LOOPS BELOW DON'T EXAMINE THE TILES ON THE EDGES OF THE SCREEN FOR PURPOSES OF DRAWING
; THE DRAW.ROW/COLUMN.SINGLE ROUTES TAKE CARE OF THAT BUT ONLY ONE IS CALLED FOR A GIVEN MOVE.
; THIS ROUTINE DRAWS ANY TILES NEEDED IN WHICHVER ISN'T COVERED.
;
; FOR EXAMPLE; IF MOVING EAST, THE LAST COLUMN IS DRAWN BY DRAW.COLUMN.SINGLE. THE FIRST COLUMN ISN'T A CONCERN BECAUSE THE SCROLL IS MOVING IN THAT DIRECTION, PUSING THE FIRST COLUMN OFF THE SCREEN.
; BUT THE TOP AND BOTTOM ROW NEED TO BE REVIWED FOR TILES WHICH ARE NOT DARK NOW BUT WERE DARK BEFORE


	LDA MOVE.CURRENT		;#$00=north, $01=south, $02=east, $03=west

	CMP #$00
	BEQ	.MOVE.NORTH_SOUTH
	CMP #$01
	BEQ .MOVE.NORTH_SOUTH
	CMP #$02
	BEQ	.MOVE.EAST_WEST
	CMP #$03
	BEQ .MOVE.EAST_WEST
	CMP #$AA
	BEQ .EXIT				;INITIAL SCREEN DRAW SETS THIS VALUE
	JMP .ERROR

.MOVE.NORTH_SOUTH
;**OPT** Speed. Create a lookup table with the screen.tile.data element numbers for the first and last column. That way routines like this and draw.column.single which are doing ADCs to increment can instead do INX/INY
				
	LDY #$00
	LDX #SCREEN.ARRAY.LAST_COLUMN_START
	STY SAVED.YREG
	
.LOOP.NORTH_SOUTH
;ONLY DRAW IF TILE IS NOT DARK NOW, BUT WAS DARK BEFORE	
	
	LDA SCREEN.DARK.DATA, Y					
	CMP SCREEN.DARK.DATA_BEFORE, Y
	BEQ .OTHERROW2
	CMP #$00
	BNE .OTHERROW2
	
	JSR DRAW.TILE.SINGLE
	
.OTHERROW2
	LDA SCREEN.DARK.DATA, X					
	CMP SCREEN.DARK.DATA_BEFORE, X
	BEQ .NEXTTILE2
	CMP #$00
	BNE .NEXTTILE2
	
	TXA
	TAY
	JSR DRAW.TILE.SINGLE

.NEXTTILE2
	LDY SAVED.YREG
	CPY #SCREEN.ARRAY.LAST_COLUMN_START
	BEQ .EXIT
	
	TYA
	CLC
	ADC #SCREEN.ARRAY.OFFSET
	STA SAVED.YREG
	
	TXA
	CLC
	ADC #SCREEN.ARRAY.OFFSET
	TAX
	
	JMP .LOOP.NORTH_SOUTH
	
.MOVE.EAST_WEST
					
	LDY #$00
	LDX #SCREEN.ARRAY.LAST_ROW_START
	STY SAVED.YREG
	
.LOOP.EAST_WEST
;ONLY DRAW IF TILE IS NOT DARK NOW, BUT WAS DARK BEFORE	
	
	LDA SCREEN.DARK.DATA, Y					
	CMP SCREEN.DARK.DATA_BEFORE, Y
	BEQ .OTHERROW1
	CMP #$00
	BNE .OTHERROW1
	
	JSR DRAW.TILE.SINGLE
	
.OTHERROW1
	LDA SCREEN.DARK.DATA, X					
	CMP SCREEN.DARK.DATA_BEFORE, X
	BEQ .NEXTTILE1
	CMP #$00
	BNE .NEXTTILE1
	
	TXA
	TAY
	JSR DRAW.TILE.SINGLE

.NEXTTILE1
	LDY SAVED.YREG
	CPY #SCREEN.ARRAY.LAST_COLUMN_START
	BEQ .EXIT
	INY
	INX
	STY SAVED.YREG
	JMP .LOOP.EAST_WEST


.EXIT			
;RETORE REGISTERS (ENTRY VALUES)
	PLA
	TAY
	PLA
	TAX
	
	RTS
	
.ERROR
; DRAW.MISC REPORTS AN INVALID VALUE IN MOVE.CURRENT
	BRK
	
DRAW.MISC.STEP
;BRANCH WAS OUT OF RANGE, THIS IS THE STEPPING STONE.
	JMP DRAW.MISC
	
OUTERLOOP
;INCREMENT THE CURRENT TILE BEING EVALUTED BASED IN SEARCH INDEX

;TROUBLESHOOTING HOOK #3
	;BRK
	
;RESTORE REGISTERS (INTERNAL VALUES)
	PLA
	TAX

	;SEARCH FOR OBSCURING TILES	
	CPX #SCREEN.DARK.SEARCH_INDEX.STOP	;HAS LAST INDEX BEEN READ IN?
	BEQ DRAW.MISC.STEP					;IF YES, EXIT LOOP, DO FINAL DRAW ROUTINES
	
	INX									;ADVANCE ONE ELEMENT IN THE SEARCH INDEX THAT PROVIDES THE Y-REG INDEX VALUES
	LDY SCREEN.DARK.SEARCH_INDEX, X		;NEXT TILE

;SAVE REGISTERS	(INTERNAL VALUES)
	TXA
	PHA

;TROUBLESHOOTING HOOK #3	
;TESTENTRY
;NOTE: TESTENTRY IS A LABEL, UNCOMMENT IT 
	
INNERLOOP								
;SEARCH FOR OBSCURING TILES
	LDA SCREEN.DARK.DATA,Y				;LOAD SCREEN POSITION OF CURRENT TILE BEING EVALUATED

	;VETO THIS TILE?
	CMP #$01							;IS CURRENT TILE FLAGGED DARK?
	BEQ OUTERLOOP						;IF YES, NEXT TILE

	;DRAW CURRENT TILE?
	LDA SCREEN.DARK.DATA_BEFORE, Y		
	CMP #$01							;WAS CURRENT DARK BEFORE? (LAST MOVE)
	BEQ DRAWTILE						;IF YES, DRAW THE TILE
	
	;DETERMINE IF CURRENT TILE IS AN OBSCURING TILE
INNERLOOP.REENTRY1
	LDA SCREEN.TILE.DATA,Y				;GET TILE_TYPE OF CURRENT TILE
	CMP #$03							;MOUNTAIN TILE?
	BEQ	DARKNESS.CALCULATE
										;IF NOT OBSCURING TILE, NEXT TILE										
NEXTTILE
		
	JMP OUTERLOOP

DRAWTILE
;Y-REG CONTAINS SCREEN POSITION AS MAPPED TO SCREEN.TILE.DATA.
	
;			STA TEMP
;			LDA GMAP
;			CMP #$56
;			BNE .TEMP
;			LDA TEXT
;			LDA PAGE1
;			BRK
;			JSR FLIP.PAGE
;			JSR KEYIN
;			JSR FLIP.PAGE
;			CPY #$88
;			BNE .TEMP
;			LDA TEXT
	;		LDA PAGE1
;			BRK
;.TEMP
	
	JSR DRAW.TILE.SINGLE

	JMP INNERLOOP.REENTRY1
	
	
DARKNESS.CALCULATE
;			TROUBLESHOOTING HOOK #2
;			TYA
;			STA $9400,Y
;			NOTE: TO USE, CHANGE $9400 TO A PAGE OF FREE MEMORY (OR AT LEAST TO $00-$BA). IN A DRIVER, SET THIS RANGE TO $00 BEFORE ENTERING OUTERLOOP. THIS 
;				HOOK WILL LOG EACH Y VALUE FOR WHICH DARKNESS IS CALCUALTED. THE Y VALUE CORRESPONDS TO THE SCREEN.TILE.DATA ELEMENT. 
	
;UPDATE SCREEN COLUMN & ROW
	LDA SCREEN.INDEX.ROW, Y
	STA SCREEN.DARK.ALGORITHM.ROW

	LDA SCREEN.INDEX.COLUMN, Y
	STA SCREEN.DARK.ALGORITHM.COLUMN

	
;DETERMINE ALGORITHM TYPE FOR THIS SCREEN LOCATION
	
	;assumes column index is in ACC at this point
	CMP #SCREEN.DARK.MIDDLE_COLUMN 
	BCC .GROUP1
	BEQ .GROUP2 

;default
.GROUP3
	LDA SCREEN.DARK.ALGORITHM.ROW
	CMP #SCREEN.DARK.MIDDLE_ROW
	BCC .TYPE5.JMP
	BEQ .TYPE6.JMP
	;DEFAULT
	JMP TYPE7
.TYPE5.JMP
	JMP TYPE5
.TYPE6.JMP
	JMP TYPE6
	
.GROUP2
	LDA SCREEN.DARK.ALGORITHM.ROW
	CMP #SCREEN.DARK.MIDDLE_ROW
	BCC .TYPE3.JMP
	;DEFAULT			;if the location is == column 8, and not < row 5, it must be > row 5, because it can't be == row 5. Column 8, row 5 is the player tile. A safegaurd exists in DARKNESS REVIEW to prevent the player tile from ever entering this routine.
	JMP TYPE4 
.TYPE3.JMP
	JMP TYPE3
	
.GROUP1

	LDA SCREEN.DARK.ALGORITHM.ROW
	CMP #SCREEN.DARK.MIDDLE_ROW 
	BCC TYPE0
	BEQ TYPE1

;**OPT** Memory (without compromising speed) I think type 2 & type 7 can be combined
;because they both use addition for the offset, and literally the only difference between these two routines
;appears to be the amount of the offset. currently constants are used but when the type is determined, the offset could be loaded into
;a variable based on the type and then JMP to a common routine.
;same logic applies to combining type 0 and type 5

;DEFAULT
TYPE2

	
	STY SCREEN.DARK.ALGORITHM.LOCATION
.LOOP
	LDA SCREEN.DARK.ALGORITHM.LOCATION	;MOVE 1 TILE DOWN/LEFT
	CLC
	ADC #SCREEN.ARRAY.OFFSET_RIGHT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION
	TAX
		
	LDA #$01
	STA SCREEN.DARK.DATA,X				;SET CURRENT TILE TO DARK
	CMP SCREEN.DARK.DATA_BEFORE,X		;WAS TILE DARK BEFORE?
			
;			STA TEMP
;			LDA GMAP
;			CMP #$54
;			BNE .TEMP
			;CPY #$68			;IT SHOULD SET DARK ON TILE X=$88 VIA TYPE2
;			CPX #$88
;			BNE .TEMP
			;JSR FLIP.PAGE
			;JSR KEYIN
;			LDA SCREEN.DARK.DATA_BEFORE,X
;			TAX
;			LDA TEXT
;			LDA PAGE1
;			BRK
;.TEMP
;			LDA TEMP
			
	BEQ .SKIPERASE						;IF YES, DON'T ERASE THE TILE
;**OPT** Speed. Include straight line code for erase.tile in each algorithm type 
;		to eliminate this JSR. a JMP out of the loop won't work because each TYPE loop calls the erase routine. 

			
	JSR ERASE.TILE						;IF NO, ERASE THE TILE	
.SKIPERASE
		
	LDA SCREEN.INDEX.ROW, X
	CMP #SCREEN.ROW.LAST				;HAVE WE REACHED ROWA?
	BEQ .EXIT						;IF YES, EXIT INNERLOOP
	LDA SCREEN.INDEX.COLUMN, X			;IF NO, HAVE WE REACHED COLUMN0
	CMP #$00
	BEQ .EXIT						;IF YES, EXIT INNERLOOP
		
	JMP .LOOP	

.EXIT
	JMP OUTERLOOP
	
	
TYPE0
	STY SCREEN.DARK.ALGORITHM.LOCATION
.LOOP
	LDA SCREEN.DARK.ALGORITHM.LOCATION	;MOVE 1 TILE UP/LEFT
	SEC 
	SBC #SCREEN.ARRAY.OFFSET_LEFT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION
	TAX
		
	LDA #$01
	STA SCREEN.DARK.DATA,X				;SET CURRENT TILE TO DARK
	CMP SCREEN.DARK.DATA_BEFORE,X		;WAS TILE DARK BEFORE?
	BEQ .SKIPERASE						;IF YES, DON'T ERASE THE TILE
;**OPT** Speed. Include straight line code for erase.tile in each algorithm type 
;		to eliminate this JSR. a JMP out of the loop won't work because each TYPE loop calls the erase routine. 
		
		
	JSR ERASE.TILE						;IF NO, ERASE THE TILE	
.SKIPERASE
		
	LDA SCREEN.INDEX.ROW, X
	CMP #$00						;HAVE WE REACHED ROW0?
	BEQ .EXIT						;IF YES, EXIT INNERLOOP
	LDA SCREEN.INDEX.COLUMN, X		;IF NO, HAVE WE REACHED COLUMN0
	CMP #$00
	BEQ .EXIT						;IF YES, EXIT INNERLOOP
		
	JMP .LOOP	

.EXIT
	JMP OUTERLOOP

TYPE1	;=====AXLE & ROD, LEFT======
		
		
;INIT LOOP VALUES
	TYA 										;Y-REG CONTAINS LOCATION OF CURRENT OBSCURING TILE 
	SEC
	SBC #SCREEN.ARRAY.OFFSET_LEFT_DIAGONAL		;SET START VALUE OF ROD
	STA SCREEN.DARK.ALGORITHM.LOCATION_START
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
		
	TYA
	CLC
	ADC #SCREEN.ARRAY.OFFSET_RIGHT_DIAGONAL		;SET STOP VALUE OF ROD
	STA SCREEN.DARK.ALGORITHM.LOCATION_STOP

.LOOP	
	LDA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	TAX									;TRANSFER CURRENT TILE LOCATION TO X-REG
	LDA #$01
	STA SCREEN.DARK.DATA,X				;SET CURRENT TILE TO DARK
	CMP SCREEN.DARK.DATA_BEFORE,X		;WAS TILE DARK BEFORE?		
	BEQ .SKIPERASE						;IF YES, DON'T ERASE THE TILE
;**OPT** Speed. Include straight line code for erase.tile in each algorithm type 
;		to eliminate this JSR. a JMP out of the loop won't work because each TYPE loop calls the erase routine. 		
	JSR ERASE.TILE						;IF NO, ERASE THE TILE
		
.SKIPERASE				
		
	CPX SCREEN.DARK.ALGORITHM.LOCATION_STOP	;REACHED END OF THE ROD? (DARKNESS TO BE PLOTTED IN THIS COLUMN)
	BEQ .NEXTCOLUMN						;IF YES, NEXT COLUMN
	
	LDA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	CLC
	ADC #SCREEN.ARRAY.OFFSET					;NEXT DARKNESS TILE DOWN IN CURRENT COLUMN (ROD)
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT	
	
	JMP .LOOP
.NEXTCOLUMN
	
	LDA SCREEN.INDEX.ROW, X						;CHECK CURRENT ROW VALUE
	CMP #SCREEN.ROW.LAST						;REACHED BOTTOM ROW?
	BEQ .SKIPINC								;IF YES, DON'T INCREMENT STARTING ROW LOCATION OF DARKNESS
	;**OPT** Speed. If the screen size were !14 tiles wide or smaller, the above 3 lines aren't needed, because there wouldn't be enough columns to max out the rod length
	LDA SCREEN.INDEX.COLUMN,X					;CHECK CURRENT COLUMN VALUE
	CMP #$00									;REACHED LEFT EDGE OF SCREEN?
	BEQ .EXIT									;IF YES, EXIT (THIS ALGORITHM IS COMPLETE)

	LDA SCREEN.DARK.ALGORITHM.LOCATION_START	;IF NO, INCREMENT STARTING ROW/COLUMN 
	SEC
	SBC #SCREEN.ARRAY.OFFSET_LEFT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION_START
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	
	LDA SCREEN.DARK.ALGORITHM.LOCATION_STOP		;INCREMENT STOP ROW/COLUMN
	CLC
	ADC #SCREEN.ARRAY.OFFSET_RIGHT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION_STOP
	JMP .LOOP
.SKIPINC

	LDA SCREEN.INDEX.COLUMN,X					;CHECK CURRENT COLUMN VALUE
	CMP #$00									;REACHED LEFT EDGE OF SCREEN?
	BEQ .EXIT									;IF YES, EXIT (THIS ALGORITHM IS COMPLETE)

	
	DEC SCREEN.DARK.ALGORITHM.LOCATION_START	;INCREMENT STARTING COLUMN (KEEP ROW THE SAME, WE'RE AT THE TOP ROW ALREADY)
	LDA SCREEN.DARK.ALGORITHM.LOCATION_START
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	
	DEC SCREEN.DARK.ALGORITHM.LOCATION_STOP		;INCREMENT STOP COLUN (KEEP ROW THE SAME, WE'RE AT THE BOTTOM ROW ALREADY)
	JMP .LOOP
	
.EXIT				
	JMP OUTERLOOP


	
TYPE3	;=====AXLE & ROD, UP======

;INIT LOOP VALUES
	TYA 										;Y-REG CONTAINS LOCATION OF CURRENT OBSCURING TILE 
	SEC
	SBC #SCREEN.ARRAY.OFFSET_LEFT_DIAGONAL		;SET START VALUE OF ROD
	STA SCREEN.DARK.ALGORITHM.LOCATION_START
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
		
	TYA
	SEC
	SBC #SCREEN.ARRAY.OFFSET_RIGHT_DIAGONAL		;SET STOP VALUE OF ROD
	STA SCREEN.DARK.ALGORITHM.LOCATION_STOP

.LOOP
	LDA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	TAX									;TRANSFER CURRENT TILE LOCATION TO X-REG
	LDA #$01
	STA SCREEN.DARK.DATA,X				;SET CURRENT TILE TO DARK
	CMP SCREEN.DARK.DATA_BEFORE,X		;WAS TILE DARK BEFORE?
	BEQ .SKIPERASE						;IF YES, DON'T ERASE THE TILE
;**OPT** Speed. Include straight line code for erase.tile in each algorithm type 
;		to eliminate this JSR. a JMP out of the loop won't work because each TYPE loop calls the erase routine. 
		
	JSR ERASE.TILE						;IF NO, ERASE THE TILE	
.SKIPERASE				
	
	CPX SCREEN.DARK.ALGORITHM.LOCATION_STOP	;REACHED END OF THE ROD? (DARKNESS TO BE PLOTTED IN THIS COLUMN)
	BEQ .NEXTCOLUMN						;IF YES, NEXT COLUMN
	
	INC SCREEN.DARK.ALGORITHM.LOCATION_CURRENT	;NEXT DARKNESS TILE DOWN IN CURRENT COLUMN (ROD)
	
	JMP .LOOP
.NEXTCOLUMN
	
	LDA SCREEN.INDEX.ROW,X						;CHECK CURRENT COLUMN VALUE
	CMP #$00									;REACHED TOP ROW?
	BEQ .EXIT									;IF YES, EXIT (THIS ALGORITHM IS COMPLETE)
			
	LDA SCREEN.DARK.ALGORITHM.LOCATION_START	;IF NO, INCREMENT STARTING ROW/COLUMN 
	SEC
	SBC #SCREEN.ARRAY.OFFSET_LEFT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION_START
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	
	LDA SCREEN.DARK.ALGORITHM.LOCATION_STOP		;INCREMENT STOP ROW/COLUMN
	SEC
	SBC #SCREEN.ARRAY.OFFSET_RIGHT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION_STOP
	JMP .LOOP

	
.EXIT	
	JMP OUTERLOOP
	;RETURN VIA JMP TO THE UPPER LEVEL LOOP

	
TYPE4	;=====AXLE & ROD, DOWN======
		
		
;INIT LOOP VALUES
	TYA 										;Y-REG CONTAINS LOCATION OF CURRENT OBSCURING TILE 
	CLC
	ADC #SCREEN.ARRAY.OFFSET_RIGHT_DIAGONAL		;SET START VALUE OF ROD
	STA SCREEN.DARK.ALGORITHM.LOCATION_START
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
		
	TYA
	CLC
	ADC #SCREEN.ARRAY.OFFSET_LEFT_DIAGONAL		;SET STOP VALUE OF ROD
	STA SCREEN.DARK.ALGORITHM.LOCATION_STOP

.LOOP
	LDA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	TAX									;TRANSFER CURRENT TILE LOCATION TO X-REG
	LDA #$01
	STA SCREEN.DARK.DATA,X				;SET CURRENT TILE TO DARK
	CMP SCREEN.DARK.DATA_BEFORE,X		;WAS TILE DARK BEFORE?
	BEQ .SKIPERASE						;IF YES, DON'T ERASE THE TILE
;**OPT** Speed. Include straight line code for erase.tile in each algorithm type 
;		to eliminate this JSR. a JMP out of the loop won't work because each TYPE loop calls the erase routine. 	
		
	JSR ERASE.TILE						;IF NO, ERASE THE TILE	
.SKIPERASE				
	
	CPX SCREEN.DARK.ALGORITHM.LOCATION_STOP	;REACHED END OF THE ROD? (DARKNESS TO BE PLOTTED IN THIS COLUMN)
	BEQ .NEXTCOLUMN						;IF YES, NEXT COLUMN
	
	INC SCREEN.DARK.ALGORITHM.LOCATION_CURRENT	;NEXT DARKNESS TILE DOWN IN CURRENT COLUMN (ROD)
	
	JMP .LOOP
.NEXTCOLUMN
	
	LDA SCREEN.INDEX.ROW,X						;CHECK CURRENT COLUMN VALUE
	CMP #SCREEN.ROW.LAST						;REACHED BOTTOM OF SCREEN?
	BEQ .EXIT									;IF YES, EXIT (THIS ALGORITHM IS COMPLETE)
			
	LDA SCREEN.DARK.ALGORITHM.LOCATION_START	;IF NO, INCREMENT STARTING ROW/COLUMN 
	CLC
	ADC #SCREEN.ARRAY.OFFSET_RIGHT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION_START
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	
	LDA SCREEN.DARK.ALGORITHM.LOCATION_STOP		;INCREMENT STOP ROW/COLUMN
	CLC
	ADC #SCREEN.ARRAY.OFFSET_LEFT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION_STOP
	JMP .LOOP

	
.EXIT	

	JMP OUTERLOOP	
	;RETURN VIA JMP TO THE UPPER LEVEL LOOP

	
TYPE5
	STY SCREEN.DARK.ALGORITHM.LOCATION
.LOOP
	LDA SCREEN.DARK.ALGORITHM.LOCATION	;MOVE 1 TILE UP/RIGHT
	SEC 
	SBC #SCREEN.ARRAY.OFFSET_RIGHT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION
	TAX
		
	LDA #$01
	STA SCREEN.DARK.DATA,X				;SET CURRENT TILE TO DARK
	CMP SCREEN.DARK.DATA_BEFORE,X		;WAS TILE DARK BEFORE?
	BEQ .SKIPERASE						;IF YES, DON'T ERASE THE TILE
;**OPT** Speed. Include straight line code for erase.tile in each algorithm type 
;		to eliminate this JSR. a JMP out of the loop won't work because each TYPE loop calls the erase routine. 

	JSR ERASE.TILE						;IF NO, ERASE THE TILE	
.SKIPERASE
			
	LDA SCREEN.INDEX.ROW, X
	CMP #$00							;HAVE WE REACHED ROW0?
	BEQ .EXIT							;IF YES, EXIT INNERLOOP
	LDA SCREEN.INDEX.COLUMN, X			;IF NO, HAVE WE REACHED COLUMN10
	CMP #SCREEN.COLUMN.LAST
	BEQ .EXIT							;IF YES, EXIT INNERLOOP
		
	JMP .LOOP	

.EXIT
	JMP OUTERLOOP
	

TYPE6	;=====AXLE & ROD, RIGHT======
;INIT LOOP VALUES

	TYA 										;Y-REG CONTAINS LOCATION OF CURRENT OBSCURING TILE 
	SEC
	SBC #SCREEN.ARRAY.OFFSET_RIGHT_DIAGONAL		;SET START VALUE OF ROD
	STA SCREEN.DARK.ALGORITHM.LOCATION_START
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
		
	TYA
	CLC
	ADC #SCREEN.ARRAY.OFFSET_LEFT_DIAGONAL		;SET STOP VALUE OF ROD
	STA SCREEN.DARK.ALGORITHM.LOCATION_STOP

.LOOP
	LDA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	TAX									;TRANSFER CURRENT TILE LOCATION TO X-REG
	LDA #$01
	STA SCREEN.DARK.DATA,X				;SET CURRENT TILE TO DARK
	CMP SCREEN.DARK.DATA_BEFORE,X		;WAS TILE DARK BEFORE?
	BEQ .SKIPERASE						;IF YES, DON'T ERASE THE TILE
;**OPT** Speed. Include straight line code for erase.tile in each algorithm type 
;		to eliminate this JSR. a JMP out of the loop won't work because each TYPE loop calls the erase routine. 
		
	JSR ERASE.TILE						;IF NO, ERASE THE TILE	
.SKIPERASE				
	
	CPX SCREEN.DARK.ALGORITHM.LOCATION_STOP	;REACHED END OF THE ROD? (DARKNESS TO BE PLOTTED IN THIS COLUMN)
	BEQ .NEXTCOLUMN						;IF YES, NEXT COLUMN
	
	LDA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	CLC
	ADC #SCREEN.ARRAY.OFFSET					;NEXT DARKNESS TILE DOWN IN CURRENT COLUMN (ROD)
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT	
	
	JMP .LOOP
.NEXTCOLUMN

			
	LDA SCREEN.INDEX.ROW, X						;CHECK CURRENT ROW VALUE
	CMP #SCREEN.ROW.LAST						;REACHED BOTTOM ROW?
	BEQ .SKIPINC								;IF YES, DON'T INCREMENT STARTING ROW LOCATION OF DARKNESS
	;**OPT** Speed. If the screen size were !14 tiles wide or smaller, the above 3 lines aren't needed, because there wouldn't be enough columns to max out the rod length
	LDA SCREEN.INDEX.COLUMN,X					;CHECK CURRENT COLUMN VALUE
	CMP #SCREEN.COLUMN.LAST						;REACHED RIGHT EDGE OF SCREEN?
	BEQ .EXIT									;IF YES, EXIT (THIS ALGORITHM IS COMPLETE)

	LDA SCREEN.DARK.ALGORITHM.LOCATION_START	;IF NO, INCREMENT STARTING ROW/COLUMN 
	SEC
	SBC #SCREEN.ARRAY.OFFSET_RIGHT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION_START
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	
	LDA SCREEN.DARK.ALGORITHM.LOCATION_STOP		;INCREMENT STOP ROW/COLUMN
	CLC
	ADC #SCREEN.ARRAY.OFFSET_LEFT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION_STOP
	JMP .LOOP
.SKIPINC

	LDA SCREEN.INDEX.COLUMN,X					;CHECK CURRENT COLUMN VALUE
	CMP #SCREEN.COLUMN.LAST						;REACHED LEFT EDGE OF SCREEN?
	BEQ .EXIT									;IF YES, EXIT (THIS ALGORITHM IS COMPLETE)

	
	INC SCREEN.DARK.ALGORITHM.LOCATION_START	;INCREMENT STARTING COLUMN (KEEP ROW THE SAME, WE'RE AT THE TOP ROW ALREADY)
	LDA SCREEN.DARK.ALGORITHM.LOCATION_START
	STA SCREEN.DARK.ALGORITHM.LOCATION_CURRENT
	
	INC SCREEN.DARK.ALGORITHM.LOCATION_STOP		;INCREMENT STOP COLUN (KEEP ROW THE SAME, WE'RE AT THE BOTTOM ROW ALREADY)
	JMP .LOOP
	
.EXIT	
	JMP OUTERLOOP
	;RETURN VIA JMP TO THE UPPER LEVEL LOOP

TYPE7
	STY SCREEN.DARK.ALGORITHM.LOCATION
.LOOP
	LDA SCREEN.DARK.ALGORITHM.LOCATION	;MOVE 1 TILE DOWN/RIGHT
	CLC
	ADC #SCREEN.ARRAY.OFFSET_LEFT_DIAGONAL
	STA SCREEN.DARK.ALGORITHM.LOCATION
	TAX
		
	LDA #$01
	STA SCREEN.DARK.DATA,X				;SET CURRENT TILE TO DARK
	CMP SCREEN.DARK.DATA_BEFORE,X		;WAS TILE DARK BEFORE?
	BEQ .SKIPERASE						;IF YES, DON'T ERASE THE TILE
;**OPT** Speed. Include straight line code for erase.tile in each algorithm type 
;		to eliminate this JSR. a JMP out of the loop won't work because each TYPE loop calls the erase routine. 

			
	JSR ERASE.TILE						;IF NO, ERASE THE TILE	
.SKIPERASE	
		
	LDA SCREEN.INDEX.ROW, X
	CMP #SCREEN.ROW.LAST				;HAVE WE REACHED ROWA?
	BEQ .EXIT						;IF YES, EXIT INNERLOOP
	LDA SCREEN.INDEX.COLUMN, X			;IF NO, HAVE WE REACHED COLUMN10
	CMP #SCREEN.COLUMN.LAST
	BEQ .EXIT						;IF YES, EXIT INNERLOOP
		
	JMP .LOOP	

.EXIT
	JMP OUTERLOOP

;======INCLUDE FILES======

;NONE
	

				
;==========================DEFINE VARIABLES======================

SCREEN.DARK.DATA						.EQ	$9200	;ENDS AT $92BA
;	mirrors screen tile layout. 
;	Values for each tile are 0 (normal), 1 (dark)

SCREEN.DARK.DATA_BEFORE					.EQ $9300	;ENDS AT $93BA
;	the data from screen.dark.data the move before

SCREEN.DARK.ALGORITHM.ROW				.BS	$1
SCREEN.DARK.ALGORITHM.COLUMN			.BS	$1
SCREEN.DARK.ALGORITHM.LOCATION			.BS $1

SCREEN.DARK.MIDDLE_ROW					.EQ $05		;#CONSTANT
SCREEN.DARK.MIDDLE_COLUMN				.EQ $08		;#CONSTANT
SCREEN.DARK.ALGORITHM.LOCATION_STOP		.BS $1
SCREEN.DARK.ALGORITHM.LOCATION_START	.BS $1
SCREEN.DARK.ALGORITHM.LOCATION_CURRENT	.BS $1

SCREEN.DARK.SEARCH_INDEX.STOP			.EQ $85		;#CONSTANT


;MOVE TO GRAPHICS_ENGINE?
SCREEN.ARRAY.OFFSET_LEFT_DIAGONAL		.EQ $12		;#CONSTANT ;the left/right designation refers to the location of the top of diagonal in an X pattern.
SCREEN.ARRAY.OFFSET_RIGHT_DIAGONAL 		.EQ $10		;#CONSTANT ;the left/right designation refers to the location of the top of diagonal in an X pattern.

SAVED.YREG								.BS $01		;1byt
		
;the current element of the screen.tile.data, screen.dark.data or screen.dark.data_before arrays are the index to the row/column arrays. return value is the column/row #.
SCREEN.INDEX.COLUMN			.HS	00.01.02.03.04.05.06.07.08.09.0A.0B.0C.0D.0E.0F.10.00.01.02.03.04.05.06.07.08.09.0A.0B.0C.0D.0E.0F.10.00.01.02.03.04.05.06.07.08.09.0A.0B.0C.0D.0E.0F.10.00.01.02.03.04.05.06.07.08.09.0A.0B.0C.0D.0E.0F.10.00.01.02.03.04.05.06.07.08.09.0A.0B.0C.0D.0E.0F.10.00.01.02.03.04.05.06.07.08.09.0A.0B.0C.0D.0E.0F.10.00.01.02.03.04.05.06.07.08.09.0A.0B.0C.0D.0E.0F.10.00.01.02.03.04.05.06.07.08.09.0A.0B.0C.0D.0E.0F.10.00.01.02.03.04.05.06.07.08.09.0A.0B.0C.0D.0E.0F.10.00.01.02.03.04.05.06.07.08.09.0A.0B.0C.0D.0E.0F.10.00.01.02.03.04.05.06.07.08.09.0A.0B.0C.0D.0E.0F.10
SCREEN.INDEX.ROW			.HS 00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.02.02.02.02.02.02.02.02.02.02.02.02.02.02.02.02.02.03.03.03.03.03.03.03.03.03.03.03.03.03.03.03.03.03.04.04.04.04.04.04.04.04.04.04.04.04.04.04.04.04.04.05.05.05.05.05.05.05.05.05.05.05.05.05.05.05.05.05.06.06.06.06.06.06.06.06.06.06.06.06.06.06.06.06.06.07.07.07.07.07.07.07.07.07.07.07.07.07.07.07.07.07.08.08.08.08.08.08.08.08.08.08.08.08.08.08.08.08.08.09.09.09.09.09.09.09.09.09.09.09.09.09.09.09.09.09.0A.0A.0A.0A.0A.0A.0A.0A.0A.0A.0A.0A.0A.0A.0A.0A.0A
SCREEN.INDEX.TILE_SBYTE		.HS 02.04.06.08.0A.0C.0E.10.12.14.16.18.1A.1C.1E.20.22.02.04.06.08.0A.0C.0E.10.12.14.16.18.1A.1C.1E.20.22.02.04.06.08.0A.0C.0E.10.12.14.16.18.1A.1C.1E.20.22.02.04.06.08.0A.0C.0E.10.12.14.16.18.1A.1C.1E.20.22.02.04.06.08.0A.0C.0E.10.12.14.16.18.1A.1C.1E.20.22.02.04.06.08.0A.0C.0E.10.12.14.16.18.1A.1C.1E.20.22.02.04.06.08.0A.0C.0E.10.12.14.16.18.1A.1C.1E.20.22.02.04.06.08.0A.0C.0E.10.12.14.16.18.1A.1C.1E.20.22.02.04.06.08.0A.0C.0E.10.12.14.16.18.1A.1C.1E.20.22.02.04.06.08.0A.0C.0E.10.12.14.16.18.1A.1C.1E.20.22.02.04.06.08.0A.0C.0E.10.12.14.16.18.1A.1C.1E.20.22
SCREEN.INDEX.TILE_LINE		.HS 08.08.08.08.08.08.08.08.08.08.08.08.08.08.08.08.08.18.18.18.18.18.18.18.18.18.18.18.18.18.18.18.18.18.28.28.28.28.28.28.28.28.28.28.28.28.28.28.28.28.28.38.38.38.38.38.38.38.38.38.38.38.38.38.38.38.38.38.48.48.48.48.48.48.48.48.48.48.48.48.48.48.48.48.48.58.58.58.58.58.58.58.58.58.58.58.58.58.58.58.58.58.68.68.68.68.68.68.68.68.68.68.68.68.68.68.68.68.68.78.78.78.78.78.78.78.78.78.78.78.78.78.78.78.78.78.88.88.88.88.88.88.88.88.88.88.88.88.88.88.88.88.88.98.98.98.98.98.98.98.98.98.98.98.98.98.98.98.98.98.A8.A8.A8.A8.A8.A8.A8.A8.A8.A8.A8.A8.A8.A8.A8.A8.A8


SCREEN.DARK.SEARCH_INDEX	.HS 6D.5C.4B.4C.4D.5E.6F.6E.39.4A.5B.6C.7D.3A.3B.3C.3D.4E.5F.70.81.7E.7F.80.27.38.49.5A.6B.7C.8D.28.29.2A.2B.2C.2D.3E.4F.60.71.82.93.8E.8F.90.91.92.15.26.37.48.59.6A.7B.8C.9D.16.17.18.19.1A.1B.1C.1D.2E.3F.50.61.72.83.94.A5.9E.9F.A0.A1.A2.A3.A4.14.25.36.47.58.69.7A.8B.9C.1E.2F.40.51.62.73.84.95.A6.13.24.35.46.57.68.79.8A.9B.1F.30.41.52.63.74.85.96.A7.12.23.34.45.56.67.78.89.9A.20.31.42.53.64.75.86.97.A8


;TEST (REMOVE)
;E/W TEST
;SCREEN.DARK.DATA	.HS	
;N/S TEST
;SCREEN.DARK.DATA	

;INIT VALUES ON NORTH MOVE TEST


;*****TESTING VARIABLES******

;lots of mountains BOTTOM/RIGHT
;SCREEN.TILE.DATA 	.HS 00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.03.03.03.03.00.00.00.00.00.00.00.00.00.00.AA.00.00.03.03.03.03.00.00.00.00.00.00.00.00.00.00.00.00.03.03.03.03.03.03.00.00.00.00.00.00.00.00.00.00.03.03.03.03.03.03.03.03.00.00.00.00.00.03.03.03.03.03.03.03.03.03.03.03.03.00.00.00.00.03.03.03.03.03.03.03.03.03.03.03.03.03.00.00.00.03.03.03.03.03.03.03.03.03.03.03.03.03.03


;moutain at $6E, downward axle/rod
;SCREEN.TILE.DATA	




;RAW DATA TO FOR CREATING TEST SCREEN.TILE.ARRAY
;PLAYER TILE IS THE $AA VALUE.

;this one is blank except for player $AA value (change that to $00)
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.AA.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00

;below this point has some mountains ($03) set


;SCREEN.TILE.DATA 				
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.03.AA.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.


;SCREEN.TILE.DATA 		.HS	

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.03.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.03.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.03.00.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.00.03.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.AA.03.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00





;SCREEN.TILE.DATA .HS 00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.03.03.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.03.03.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.03.03.03.03.00.00.00.00.AA.00.00.00.00.00.00.00.00.03.03.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.03.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.
;03.03.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.

;03.03.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.
;03.03.03.03.00.00.00.00.AA.00.00.00.00.00.00.00.00.
;03.03.03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.
;03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;03.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00



;SCREEN.TILE.DATA .HS 00.00.00.00.00.03.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.03.03.03.03.00.00.00.00.00.00.00.00.00.00.00.03.00.00.00.00.03.00.00.00.00.00.00.00.00.00.00.00.03.03.03.03.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.03.00.00.00.00.00.00

;00.00.00.00.00.03.00.03.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.03.00.03.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.03.00.03.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.03.00.03.00.00.00.00.00.00.00.00.00.

;00.00.00.00.00.03.00.03.03.03.03.00.00.00.00.00.00.
;00.00.00.00.00.03.00.00.AA.00.03.00.00.00.00.00.00.
;00.00.00.00.00.03.03.03.03.00.03.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.03.00.03.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.03.00.03.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.03.00.03.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.03.00.03.00.00.00.00.00.00





;SCREEN.TILE.DATA .HS 00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.03.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00



;lots of mountains on bottom and right side


;SCREEN.TILE.DATA 		

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.03.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.03.03.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.03.03.03.00.00.

;00.00.00.00.00.00.00.00.00.00.00.03.03.03.03.00.00.
;00.00.00.00.00.00.00.00.AA.00.00.03.03.03.03.00.00.
;00.00.00.00.00.00.00.00.00.00.03.03.03.03.03.03.00.
;00.00.00.00.00.00.00.00.00.03.03.03.03.03.03.03.03.

;00.00.00.00.00.03.03.03.03.03.03.03.03.03.03.03.03.
;00.00.00.00.03.03.03.03.03.03.03.03.03.03.03.03.03.
;00.00.00.03.03.03.03.03.03.03.03.03.03.03.03.03.03

;****SCREEN.DARK.DATA TEMPLATES*******



;SCREEN.DARK.DATA	.HS	

;00.01.00.00.00.00.00.00.00.00.00.00.00.01.00.00.00.
;00.01.00.00.00.00.00.00.00.00.00.00.00.01.00.00.00.
;00.01.00.00.00.00.00.00.00.00.00.00.00.01.00.00.00.
;00.01.00.00.00.00.00.00.00.00.00.00.00.01.00.00.00.

;00.01.00.00.00.00.00.00.00.00.00.00.00.01.00.00.00.
;00.01.00.00.00.00.00.00.00.00.00.00.00.01.00.00.00.
;00.01.00.00.00.00.00.00.00.00.00.00.00.01.00.00.00.
;00.01.00.00.00.00.00.00.00.00.00.00.00.01.00.00.00.

;00.01.00.00.00.00.00.00.00.00.00.00.00.01.00.00.00.
;00.01.00.00.00.00.00.00.00.00.00.00.00.01.00.00.00.
;00.01.00.00.00.00.00.00.00.00.00.00.00.01.00.00.00




;SCREEN.DARK.DATA	

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00








;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.

;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.
;01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01


;ALL 1s
;SCREEN.DARK.DATA .HS 01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01


;STARTED SOMETHING HERE BUT DIDN'T FINISH IT
;01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.
;01.01.00.00.00.00.00.00.00.00.00.00.00.00.00.00.01.
;01.01.00.00.00.00.00.00.00.00.00.00.00.00.00.00.01.
;01.01.00.00.00.00.00.00.00.00.00.00.00.00.00.00.01.

;01.01.00.00.00.00.00.00.00.00.00.00.00.00.00.00.01.
;01.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.01.
;01.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.01.
;01.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.01.

;01.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.01.
;01.00.00.00.00.00.00.00.00.00.00.00.00.00.00.00.01.
;01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01.01